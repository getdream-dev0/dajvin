import asyncio
import logging
import os
from typing import Optional
from flask import Flask
from threading import Thread
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InputMediaPhoto, InputMediaVideo, InputMediaDocument, InputMediaAudio

# ============================================
# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER.COM
# Render —Ç—Ä–µ–±—É–µ—Ç –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º –ø–æ—Ä—Ç—É
# —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å —á—Ç–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∂–∏–≤–æ–µ
# ============================================

app = Flask(__name__)

@app.route('/')
def home():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
    return """
    <html>
        <body style="font-family: Arial; padding: 20px;">
            <h1>‚úÖ Telegram Bot Status</h1>
            <p>Bot is running!</p>
            <hr>
            <p>Prefix: """ + PREFIX_TEXT + """</p>
            <p>Send /start to your bot in Telegram to begin</p>
        </body>
    </html>
    """

@app.route('/health')
def health():
    """Endpoint –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    return "OK", 200

def run_web_server():
    """–ó–∞–ø—É—Å–∫ Flask —Å–µ—Ä–≤–µ—Ä–∞"""
    port = int(os.environ.get('PORT', 8080))
    print(f"Starting web server on port {port}")
    app.run(host='0.0.0.0', port=port, debug=False)

# ============================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê
# ============================================

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Render
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ Environment Variables –Ω–∞ Render.com")
    print("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:")
    print("1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Render")
    print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Environment")
    print("3. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é BOT_TOKEN —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞ –æ—Ç @BotFather")
    exit(1)

# –ü—Ä–µ—Ñ–∏–∫—Å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è)
PREFIX_TEXT = os.environ.get('PREFIX_TEXT', '–•–µ–ª–ª–æ—É')

# ============================================
# –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø
# ============================================

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# ============================================
# –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ë–û–¢–ê
# ============================================

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–µ—Ñ–∏–∫—Å–∞ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å –∫–æ–º–∞–Ω–¥–æ–π)
current_prefix = PREFIX_TEXT

# ============================================
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
# ============================================

def add_prefix_to_text(text: Optional[str]) -> str:
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global current_prefix
    if text:
        return f"{current_prefix}\n\n{text}"
    return current_prefix

# ============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–º–∞–Ω–¥–µ /start"""
    global current_prefix
    
    welcome_text = f"""
üëã <b>–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!</b>

–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º.

üìù <b>–¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å:</b> ¬´{current_prefix}¬ª

<b>–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:</b>
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –¥–æ–∫—É–º–µ–Ω—Ç)
‚Ä¢ –Ø –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –ø—Ä–µ—Ñ–∏–∫—Å–æ–º

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/setprefix <—Ç–µ–∫—Å—Ç> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
/prefix - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
/help - –ø–æ–º–æ—â—å

<b>–ü—Ä–∏–º–µ—Ä—ã:</b>
‚Ä¢ –¢—ã: "–ü—Ä–∏–≤–µ—Ç"
‚Ä¢ –Ø: "{current_prefix}

–ü—Ä–∏–≤–µ—Ç"

–ü–æ–ø—Ä–æ–±—É–π –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å! üöÄ
"""
    
    await message.answer(welcome_text, parse_mode="HTML")
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.username or message.from_user.id}")

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞"""
    global current_prefix
    
    help_text = f"""
üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É</b>

<b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π:</b>
‚úÖ –¢–µ–∫—Å—Ç
‚úÖ –§–æ—Ç–æ (–æ–¥–∏–Ω–æ—á–Ω—ã–µ –∏ –∞–ª—å–±–æ–º—ã)
‚úÖ –í–∏–¥–µ–æ
‚úÖ –î–æ–∫—É–º–µ–Ω—Ç—ã
‚úÖ –ê—É–¥–∏–æ
‚úÖ –ì–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
‚úÖ –°—Ç–∏–∫–µ—Ä—ã
‚úÖ –õ–æ–∫–∞—Ü–∏–∏
‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
‚Ä¢ /setprefix –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å
‚Ä¢ /prefix - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å
‚Ä¢ /help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å:</b> ¬´{current_prefix}¬ª

<b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:</b> ‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Render.com
"""
    
    await message.answer(help_text, parse_mode="HTML")

@dp.message(Command("prefix"))
async def cmd_prefix(message: types.Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å"""
    global current_prefix
    await message.answer(
        f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å: ¬´{current_prefix}¬ª\n\n"
        f"–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
        f"/setprefix –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
    )

@dp.message(Command("setprefix"))
async def cmd_setprefix(message: types.Message):
    """–ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å"""
    global current_prefix
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    command_parts = message.text.split(maxsplit=1)
    
    if len(command_parts) > 1:
        new_prefix = command_parts[1]
        current_prefix = new_prefix
        
        await message.answer(
            f"‚úÖ <b>–ü—Ä–µ—Ñ–∏–∫—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å: ¬´{current_prefix}¬ª\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.",
            parse_mode="HTML"
        )
        
        logger.info(f"–ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {current_prefix}")
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞!</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "/setprefix –î–æ–±—Ä—ã–π –¥–µ–Ω—å",
            parse_mode="HTML"
        )

# ============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö –í–°–ï–• –°–û–û–ë–©–ï–ù–ò–ô
# ============================================

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø (–∞–ª—å–±–æ–º–æ–≤)
media_groups = {}

@dp.message()
async def handle_message(message: types.Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å"""
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç (caption –¥–ª—è –º–µ–¥–∏–∞ –∏–ª–∏ text –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π)
        original_text = message.caption or message.text or ""
        new_text = add_prefix_to_text(original_text)
        
        # === –ú–ï–î–ò–ê-–ì–†–£–ü–ü–´ (–ê–õ–¨–ë–û–ú–´) ===
        if message.media_group_id:
            await handle_media_group(message, new_text)
            return
            
        # === –§–û–¢–û ===
        if message.photo:
            await message.answer_photo(
                photo=message.photo[-1].file_id,  # –ë–µ—Ä–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ")
            
        # === –í–ò–î–ï–û ===
        elif message.video:
            await message.answer_video(
                video=message.video.file_id,
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ")
            
        # === –î–û–ö–£–ú–ï–ù–¢–´ ===
        elif message.document:
            await message.answer_document(
                document=message.document.file_id,
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç")
            
        # === –ê–£–î–ò–û ===
        elif message.audio:
            await message.answer_audio(
                audio=message.audio.file_id,
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—É–¥–∏–æ")
            
        # === –ì–û–õ–û–°–û–í–´–ï –°–û–û–ë–©–ï–ù–ò–Ø ===
        elif message.voice:
            await message.answer_voice(
                voice=message.voice.file_id,
                caption=new_text if new_text != current_prefix else None
            )
            if new_text == current_prefix:
                await message.answer(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ")
            
        # === –í–ò–î–ï–û-–ó–ê–ú–ï–¢–ö–ò (–ö–†–£–ñ–û–ß–ö–ò) ===
        elif message.video_note:
            await message.answer_video_note(
                video_note=message.video_note.file_id
            )
            # –ö—Ä—É–∂–æ—á–∫–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç caption
            await message.answer(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞")
            
        # === –°–¢–ò–ö–ï–†–´ ===
        elif message.sticker:
            await message.answer_sticker(
                sticker=message.sticker.file_id
            )
            # –°—Ç–∏–∫–µ—Ä—ã –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç caption
            if new_text:
                await message.answer(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç–∏–∫–µ—Ä")
            
        # === –õ–û–ö–ê–¶–ò–ò ===
        elif message.location:
            await message.answer_location(
                latitude=message.location.latitude,
                longitude=message.location.longitude
            )
            if new_text:
                await message.answer(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è")
            
        # === –ö–û–ù–¢–ê–ö–¢–´ ===
        elif message.contact:
            await message.answer_contact(
                phone_number=message.contact.phone_number,
                first_name=message.contact.first_name,
                last_name=message.contact.last_name or "",
                vcard=message.contact.vcard
            )
            if new_text:
                await message.answer(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç")
            
        # === –û–ë–´–ß–ù–´–ô –¢–ï–ö–°–¢ ===
        elif message.text:
            await message.answer(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        )

async def handle_media_group(message: types.Message, new_text: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–ª—å–±–æ–º–æ–≤ (–Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)"""
    
    media_group_id = message.media_group_id
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
    if media_group_id not in media_groups:
        media_groups[media_group_id] = {
            'messages': [],
            'user_id': message.from_user.id,
            'chat_id': message.chat.id,
            'timer': None
        }
    
    group = media_groups[media_group_id]
    group['messages'].append(message)
    
    # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    if group['timer']:
        group['timer'].cancel()
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞
    async def send_album():
        if media_group_id not in media_groups:
            return
            
        group_data = media_groups[media_group_id]
        media_list = []
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –º–µ–¥–∏–∞ –∏–∑ –≥—Ä—É–ø–ø—ã
        for idx, msg in enumerate(group_data['messages']):
            # –î–æ–±–∞–≤–ª—è–µ–º caption —Ç–æ–ª—å–∫–æ –∫ –ø–µ—Ä–≤–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            caption = new_text if idx == 0 else None
            
            if msg.photo:
                media = InputMediaPhoto(
                    media=msg.photo[-1].file_id,
                    caption=caption
                )
            elif msg.video:
                media = InputMediaVideo(
                    media=msg.video.file_id,
                    caption=caption
                )
            elif msg.document:
                media = InputMediaDocument(
                    media=msg.document.file_id,
                    caption=caption
                )
            elif msg.audio:
                media = InputMediaAudio(
                    media=msg.audio.file_id,
                    caption=caption
                )
            else:
                continue
                
            media_list.append(media)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª—å–±–æ–º
        if media_list:
            try:
                await bot.send_media_group(
                    chat_id=group_data['chat_id'],
                    media=media_list
                )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–ª—å–±–æ–º –∏–∑ {len(media_list)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª—å–±–æ–º–∞: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≥—Ä—É–ø–ø—É –∏–∑ –ø–∞–º—è—Ç–∏
        if media_group_id in media_groups:
            del media_groups[media_group_id]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–∞ 1 —Å–µ–∫—É–Ω–¥—É
    # –ï—Å–ª–∏ –∑–∞ —ç—Ç–æ –≤—Ä–µ–º—è –ø—Ä–∏–¥—É—Ç –µ—â–µ –º–µ–¥–∏–∞ - —Ç–∞–π–º–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—Å—è
    loop = asyncio.get_event_loop()
    group['timer'] = loop.call_later(1.0, lambda: asyncio.create_task(send_album()))

# ============================================
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ============================================

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    logger.info("=" * 50)
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üìù –ü—Ä–µ—Ñ–∏–∫—Å: ¬´{current_prefix}¬ª")
    logger.info(f"üåê –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Render.com")
    logger.info("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    web_thread = Thread(target=run_web_server, daemon=True)
    web_thread.start()
    logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ–±—Ö—É–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("‚úÖ –í–µ–±—Ö—É–∫–∏ –æ—á–∏—â–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    logger.info("–û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –±–æ—Ç—É –≤ Telegram")
    
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")

# ============================================
# –¢–û–ß–ö–ê –í–•–û–î–ê
# ============================================

if __name__ == "__main__":
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("‚èπ –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        exit(1)