import os
import logging
from flask import Flask
from threading import Thread
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# ============================================
# –í–ï–ë-–°–ï–†–í–ï–† –î–õ–Ø RENDER.COM
# ============================================

app = Flask(__name__)

@app.route('/')
def home():
    return f"""
    <html>
        <body style="font-family: Arial; padding: 20px;">
            <h1>‚úÖ Telegram Bot Status</h1>
            <p>Bot is running!</p>
            <hr>
            <p>Prefix: {PREFIX_TEXT}</p>
        </body>
    </html>
    """

@app.route('/health')
def health():
    return "OK", 200

def run_web():
    port = int(os.environ.get('PORT', 8080))
    app.run(host='0.0.0.0', port=port)

# ============================================
# –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê
# ============================================

BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    print("‚ùå –û–®–ò–ë–ö–ê: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    print("–î–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ Environment Variables –Ω–∞ Render.com")
    exit(1)

PREFIX_TEXT = os.environ.get('PREFIX_TEXT', '–•–µ–ª–ª–æ—É')
current_prefix = PREFIX_TEXT

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î
# ============================================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    global current_prefix
    
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        f"–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Ç–≤–æ–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º.\n\n"
        f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å: ¬´{current_prefix}¬ª\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º!\n\n"
        f"–ö–æ–º–∞–Ω–¥—ã:\n"
        f"/start - —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        f"/setprefix <—Ç–µ–∫—Å—Ç> - –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ—Ñ–∏–∫—Å\n"
        f"/prefix - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å"
    )
    logger.info(f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username or user.id}")

async def show_prefix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å"""
    global current_prefix
    await update.message.reply_text(
        f"üìù –¢–µ–∫—É—â–∏–π –ø—Ä–µ—Ñ–∏–∫—Å: ¬´{current_prefix}¬ª"
    )

async def set_prefix(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω—è–µ—Ç –ø—Ä–µ—Ñ–∏–∫—Å"""
    global current_prefix
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if context.args:
        new_prefix = ' '.join(context.args)
        current_prefix = new_prefix
        await update.message.reply_text(
            f"‚úÖ –ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ¬´{current_prefix}¬ª"
        )
        logger.info(f"–ü—Ä–µ—Ñ–∏–∫—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {current_prefix}")
    else:
        await update.message.reply_text(
            "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–µ—Ñ–∏–∫—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n"
            "–ü—Ä–∏–º–µ—Ä: /setprefix –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç"
        )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    global current_prefix
    
    message = update.message
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –∫ —Ç–µ–∫—Å—Ç—É
    original_text = message.caption or message.text or ""
    new_text = f"{current_prefix}\n\n{original_text}" if original_text else current_prefix
    
    try:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
        if message.photo:
            await message.reply_photo(
                photo=message.photo[-1].file_id,
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–æ—Ç–æ")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ
        elif message.video:
            await message.reply_video(
                video=message.video.file_id,
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤–∏–¥–µ–æ")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        elif message.document:
            await message.reply_document(
                document=message.document.file_id,
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω –¥–æ–∫—É–º–µ–Ω—Ç")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—É–¥–∏–æ
        elif message.audio:
            await message.reply_audio(
                audio=message.audio.file_id,
                caption=new_text
            )
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞—É–¥–∏–æ")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö
        elif message.voice:
            await message.reply_voice(
                voice=message.voice.file_id
            )
            await message.reply_text(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–æ–∫
        elif message.video_note:
            await message.reply_video_note(
                video_note=message.video_note.file_id
            )
            await message.reply_text(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∏–∫–µ—Ä–æ–≤
        elif message.sticker:
            await message.reply_sticker(
                sticker=message.sticker.file_id
            )
            if new_text:
                await message.reply_text(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω —Å—Ç–∏–∫–µ—Ä")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–æ–∫–∞—Ü–∏–π
        elif message.location:
            await message.reply_location(
                latitude=message.location.latitude,
                longitude=message.location.longitude
            )
            if new_text:
                await message.reply_text(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ª–æ–∫–∞—Ü–∏—è")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        elif message.contact:
            await message.reply_contact(
                phone_number=message.contact.phone_number,
                first_name=message.contact.first_name,
                last_name=message.contact.last_name or ""
            )
            if new_text:
                await message.reply_text(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω –∫–æ–Ω—Ç–∞–∫—Ç")
            
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
        elif message.text:
            await message.reply_text(new_text)
            logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω —Ç–µ–∫—Å—Ç")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è."
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    logger.info("=" * 50)
    logger.info(f"ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"üìù –ü—Ä–µ—Ñ–∏–∫—Å: ¬´{current_prefix}¬ª")
    logger.info("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    web_thread = Thread(target=run_web, daemon=True)
    web_thread.start()
    logger.info("‚úÖ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("prefix", show_prefix))
    application.add_handler(CommandHandler("setprefix", set_prefix))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.ALL & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logger.info("‚úÖ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()